@page "/play/{gameToAccept}"
@page "/play"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@rendermode InteractiveWebAssembly
<div style="display: flex; flex-direction: column; align-items: center;">
<h3>Five In a Row @(game.GetMover(p))</h3>
<span style="display: flex; justify-content: center">
        @if (string.IsNullOrWhiteSpace(gameToAccept))
        {
            <button @onclick=@(() => CreateGame())>Create Game</button>
            @if (newGameCreated)
            {
                <a href="/play/@(game.Id)">link to accept</a>
            }
        } else
        {
            if (!gameAccepted)
            {
                <button @onclick=@(() => AcceptGame())>Accept Game</button>
            } else
            {
                <span>Game Accepted</span>
            }

        }

        @if (gameStarted)
        {
            <GameField 
               dimension=@dim 
                cellLen="20" 
                game=@game.Game
                onFieldClick=@onClick
                allowedMovers=@alloweMovers()
            />
        }
        <span>
        Moves:
        <ol>
                @foreach(var m in game.Game.Moves)
                {
                    <li>@m.Mover: @m.X @m.Y</li>
                }
        </ol>
    </span>
</span>
@if(game.Game.Winner != null)
{
    <div>@game.Game.Winner won!!! <button @onclick=@ResetGame>Refresh</button></div>
}
</div>

@code {

    private HubConnection hubConnection;

    public int dim = 30;
    public FiveInRowMultiplayer game = new();

    [Parameter]
    public string gameToAccept { get; set; } = "";

    bool gameAccepted = false;
    bool gameStarted = false;

    Player p = new Player();
    bool newGameCreated = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<FiveInRowMultiplayer>("GameCreated", (g) =>
        {
            game = g;
            newGameCreated = true;
            StateHasChanged();
        });

        hubConnection.On<FiveInRowMultiplayer>("GameStarted", g =>
        {
            gameAccepted = true;
            game = g;
            gameStarted = true;
            StateHasChanged();
        });

        hubConnection.On<FiveInRowMultiplayer>("GameMove", g =>
        {
            game = g;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private List<Mover> alloweMovers()
    {
        if (!game.Game.IsActive()) // no allowed movers
            return new();
        var m = game.GetMover(p);
        if (m != null)
            return new() { m.Value };
        return new();
    }

    private async Task CreateGame()
    {
        await hubConnection.SendAsync("CreateGame", p.Id, Mover.O);
    }


    private async Task AcceptGame()
    {
        await hubConnection.SendAsync("AcceptGame", gameToAccept, p.Id);
    }

    private async Task ResetGame()
    {
        await hubConnection.SendAsync("Reset", game.Id);
    }


    private async Task onClick(int x, int y)
    {
        if (game.Game.Winner == null && game.GetMover(p) == game.Game.NextMover)
        {
            await hubConnection.SendAsync("Move", game.Id, p.Id, x, y);
        }

    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
