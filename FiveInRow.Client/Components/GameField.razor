<svg width=@(size + 4) height=@(size + 4) onmouseover=@onMouseOver onclick=@onClick>
    <style>
        svg {
            cursor: @cursor();
            background-color: @(CanMove() ? "#FCFFEC" : "#E3E3E3")
        }
        
    </style>
@for (int i = 0; i <= dimension; i++)
{
    int xHor = i * cellLen;
    int yVer = i * cellLen;
    <g>
        <line x1=@xHor y1=0 x2=@xHor y2=@size stroke="black" />
        <line x1=0 y1=@yVer x2=@size y2=@yVer stroke="black" />
    </g>
}
    <!--highlight a cell-->
    @if (xH >= 0 && yH >= 0)
    {
        var upperLeft = $"{xH * cellLen + 1}, {yH * cellLen + 1}";
        var upperRight = $"{(xH+1) * cellLen - 1}, {yH * cellLen + 1}";
        var downRight = $"{(xH + 1) * cellLen - 1}, {(yH + 1) * cellLen - 1}";
        var downLeft = $"{xH * cellLen + 1}, {(yH + 1) * cellLen - 1}";
        <polygon points="@upperLeft @upperRight @downRight @downLeft" fill="yellow"></polygon>
    }

    <!-- Background X's or O's -->
    @if (allowedMovers.Count == 1 && allowedMovers[0] == game.NextMover)
    {
        @for (int i = - dimension / 2; i < dimension / 2; i++)
        {
            @for (int j = -dimension / 2; j < dimension / 2; j++)
            {
                if (i % 2 == 0 && j % 2 == 0){
                    int x = (i + centerCell.x) * cellLen + cellLen / 2;
                    int y = (j + centerCell.y) * cellLen + cellLen / 2;
                    if (allowedMovers[0] == Mover.X)
                        {
                            <XDraw x="x" y="y" size=@(cellLen * 2 - 6) opacity="0.05"/>
                        }
                        else
                        {
                            <ODraw x="x" y="y" size=@(cellLen * 2 - 6) opacity="0.05" />
                        }
                }
            }
        }
    }

    <!--Draw a game-->
    @foreach (var m in game.Moves)
    {
        int x = (m.X + centerCell.x) * cellLen + cellLen / 2;
        int y = (m.Y + centerCell.y) * cellLen + cellLen / 2;
        if (m.Mover == Mover.X)
        {
            <XDraw x="x" y="y" size="@(cellLen - 8)"/>
        } else
        {
            <ODraw x="x" y="y" size="@(cellLen - 8)" />
        }
    }
</svg>


@code {
    [Parameter]
    public int dimension { get; set; } = 20;

    [Parameter]
    public int cellLen { get; set; } = 10;

    [Parameter]
    public FiveInRowGame game { get; set; } = new();

    [Parameter]
    public List<Mover> allowedMovers { get; set; } = new() { Mover.X, Mover.O };

    [Parameter]
    public Func<int, int, Task> onFieldClick { get; set; } = (x, y) => { return Task.CompletedTask; };

    int size = 100;
    int xH = -1;
    int yH = -1;
    (int x, int y) centerCell = (0, 0);

    private bool CanMove()
    {
        return allowedMovers.Contains(game.NextMover);
    }

    private string cursor()
    {
        if (game.NextMover == Mover.X && allowedMovers.Contains(Mover.X))
        {
            return @"url('/X.png') 9 9, auto";
        }
        else if (game.NextMover == Mover.O && allowedMovers.Contains(Mover.O))
        {
            return @"url('/O.png') 9 9, auto";
        } else
        {
            return "not-allowed";
        }
    }

    protected override void OnParametersSet()
    {
        if (game.Moves.Any()){
            var maxCoord = game.Moves.Select(m => Math.Max(Math.Abs(m.X), Math.Abs(m.Y))).Max();
            if (maxCoord > dimension / 2 + 1)
                dimension = (maxCoord + 1) * 2;
        }
        init();

    }

    private void init()
    {
        size = cellLen * dimension;
        centerCell = (dimension / 2, dimension / 2);
    }
    private void recalcDimension()
    {
        if (game.Moves.Any())
        {
            var maxCoord = game.Moves.Select(m => Math.Max(Math.Abs(m.X), Math.Abs(m.Y))).Max();
            if (maxCoord >= dimension / 2 - 1){
                dimension += 6;
                init();
            }
        }

    }

    private Task onMouseOver(MouseEventArgs e)
    {
        var allowed = allowedMovers.Contains(game.NextMover);
        if (!game.IsActive() || !allowed){
            xH = yH = -1;
            return Task.CompletedTask;
        }
        var x = (int)e.OffsetX;
        var y = (int)e.OffsetY;
        xH = x / cellLen;
        yH = y / cellLen;
        return Task.CompletedTask;
    }
    private Task onClick(MouseEventArgs e)
    {
        var x = (int)e.OffsetX;
        var y = (int)e.OffsetY;
        var xC = x / cellLen;
        var yC = y / cellLen;
        var xcH = xC - centerCell.x;
        var ycH = yC - centerCell.y;
        onFieldClick(xcH, ycH);
        if (xC == 0 || yC == 0 || xC == dimension - 1 || yC == dimension - 1){
           // recalcDimension();
        }
        return Task.CompletedTask;
    }
}
